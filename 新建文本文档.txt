Dialogs in PyQt5
last modified July 16, 2020

A dialog is defined as a conversation between two or more persons. In a computer application a dialog is a window which is used to "talk" to the application. Dialogs are used for things such as getting data from users or changing application settings.


 
PyQt5 QInputDialog
QInputDialog provides a simple convenience dialog to get a single value from the user. The input value can be a string, a number, or an item from a list.
QInputDialog提供了一个简单方便的对话框，用于获取用户输入的单一数据。输入的值可以是字符串，数字或者列表项。

input_dialog.py
#!/usr/bin/python

"""
ZetCode PyQt5 tutorial

In this example, we receive data from
a QInputDialog dialog.

Aauthor: Jan Bodnar
Website: zetcode.com
"""

from PyQt5.QtWidgets import (QWidget, QPushButton, QLineEdit,
                             QInputDialog, QApplication)
import sys


class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.btn = QPushButton('Dialog', self)
        self.btn.move(20, 20)
        self.btn.clicked.connect(self.showDialog)

        self.le = QLineEdit(self)
        self.le.move(130, 22)

        self.setGeometry(300, 300, 450, 350)
        self.setWindowTitle('Input dialog')
        self.show()

    def showDialog(self):
        text, ok = QInputDialog.getText(self, 'Input Dialog',
                                        'Enter your name:')

        if ok:
            self.le.setText(str(text))


def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
The example has a button and a line edit widget. The button shows the input dialog for getting text values. The entered text will be displayed in the line edit widget.
这个案例包括一个按钮以及一个单行编辑组件。单击按钮显示输入对话框来获取文本信息。输入的文本将会被显示在行编辑组件中。


 
text, ok = QInputDialog.getText(self, 'Input Dialog',
    'Enter your name:')
	
This line displays the input dialog. The first string is a dialog title, the second one is a message within the dialog. The dialog returns the entered text and a boolean value. If we click the Ok button, the boolean value is true.
这行代码显示输入对话框。第一个参数是对话框的标题，第二个参数是对话框中显示的信息。对话框返回输入的文本信息以及一个布尔值。如果单击OK按钮，则返回的布尔值为true。

if ok:
    self.le.setText(str(text))
The text that we have received from the dialog is set to the line edit widget with setText().
通过setText()方法，我们把从对话框接收到的文本设置给单行编辑。

Input dialog
Figure: Input dialog
PyQt5 QColorDialog
QColorDialog provides a dialog widget for selecting colour values.
QColorDialog提供了一个可以选择颜色值得对话框组件。

color_dialog.py
#!/usr/bin/python

"""
ZetCode PyQt5 tutorial

In this example, we select a color value
from the QColorDialog and change the background
color of a QFrame widget.

Author: Jan Bodnar
Website: zetcode.com
"""

from PyQt5.QtWidgets import (QWidget, QPushButton, QFrame,
                             QColorDialog, QApplication)
from PyQt5.QtGui import QColor
import sys


class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        col = QColor(0, 0, 0)

        self.btn = QPushButton('Dialog', self)
        self.btn.move(20, 20)

        self.btn.clicked.connect(self.showDialog)

        self.frm = QFrame(self)
        self.frm.setStyleSheet("QWidget { background-color: %s }"
                               % col.name())
        self.frm.setGeometry(130, 22, 200, 200)

        self.setGeometry(300, 300, 450, 350)
        self.setWindowTitle('Color dialog')
        self.show()

    def showDialog(self):
        col = QColorDialog.getColor()

        if col.isValid():
            self.frm.setStyleSheet('QWidget { background-color: %s }'
                                   % col.name())


def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
The application example shows a push button and a QFrame. The widget background is set to black colour. Using the QColorDialog, we can change its background.
这个程序显示了一个按钮以及一个QFrame。组件的背景被设置为黑色。使用QColorDialog，我们可以改变它的背景。

col = QColor(0, 0, 0)
This is an initial colour of the QFrame background.
这个是QFrame的初始颜色

col = QColorDialog.getColor()
This line pops up the QColorDialog.
这一行弹出QColorDialog对话框。

if col.isValid():
    self.frm.setStyleSheet("QWidget { background-color: %s }"
        % col.name())
We check if the colour is valid. If we click on the Cancel button, no valid colour is returned. If the colour is valid, we change the background colour using style sheets.
检查颜色是否有效。如果单击Cancel按钮，则不会反悔有效的颜色。如果颜色有效，则使用样式表改变背景颜色。

 
PyQt5 QFontDialog
QFontDialog is a dialog widget for selecting a font.
QFontDialog是一个用于选择颜色的对话框组件

font_dialog.py
#!/usr/bin/python

"""
ZetCode PyQt5 tutorial

In this example, we select a font name
and change the font of a label.

Author: Jan Bodnar
Website: zetcode.com
"""

from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QPushButton,
                             QSizePolicy, QLabel, QFontDialog, QApplication)
import sys


class Example(QWidget):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        vbox = QVBoxLayout()

        btn = QPushButton('Dialog', self)
        btn.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        btn.move(20, 20)

        vbox.addWidget(btn)

        btn.clicked.connect(self.showDialog)

        self.lbl = QLabel('Knowledge only matters', self)
        self.lbl.move(130, 20)

        vbox.addWidget(self.lbl)
        self.setLayout(vbox)

        self.setGeometry(300, 300, 450, 350)
        self.setWindowTitle('Font dialog')
        self.show()

    def showDialog(self):

        font, ok = QFontDialog.getFont()
        if ok:
            self.lbl.setFont(font)


def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
In our example, we have a button and a label. With the QFontDialog, we change the font of the label.
在这个例子中，我们有一个按钮和一个标签。通过QFontDialog，我们改变了标签的颜色。

font, ok = QFontDialog.getFont()
Here we pop up the font dialog. The getFont method returns the font name and the ok parameter. It is equal to True if the user clicked Ok; otherwise it is False.
这里弹出一个对话框。getFont()方法返回颜色的名称以及ok参数的值。如果用户点击OK，则值为True；否则值为False

if ok:
    self.label.setFont(font)
If we clicked Ok, the font of the label is changed with setFont.
如果点击了OK，则通过setFont()方法改变标签的值。

PyQt5 QFileDialog
QFileDialog is a dialog that allows users to select files or directories. The files can be selected for both opening and saving.
QFileDialog对话框允许用户选择文件或者目录。被选中的文件可以打开或者保存。

file_dialog.py
#!/usr/bin/python

"""
ZetCode PyQt5 tutorial

In this example, we select a file with a
QFileDialog and display its contents
in a QTextEdit.

Author: Jan Bodnar
Website: zetcode.com
"""

from PyQt5.QtWidgets import (QMainWindow, QTextEdit,
                             QAction, QFileDialog, QApplication)
from PyQt5.QtGui import QIcon
import sys
from pathlib import Path


class Example(QMainWindow):

    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.textEdit = QTextEdit()
        self.setCentralWidget(self.textEdit)
        self.statusBar()

        openFile = QAction(QIcon('open.png'), 'Open', self)
        openFile.setShortcut('Ctrl+O')
        openFile.setStatusTip('Open new File')
        openFile.triggered.connect(self.showDialog)

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        fileMenu.addAction(openFile)

        self.setGeometry(300, 300, 550, 450)
        self.setWindowTitle('File dialog')
        self.show()

    def showDialog(self):

        home_dir = str(Path.home())
        fname = QFileDialog.getOpenFileName(self, 'Open file', home_dir)

        if fname[0]:
            f = open(fname[0], 'r')

            with f:
                data = f.read()
                self.textEdit.setText(data)


def main():
    app = QApplication(sys.argv)
    ex = Example()
    sys.exit(app.exec_())


if __name__ == '__main__':
    main()
The example shows a menubar, centrally set text edit widget, and a statusbar. The menu item shows the QFileDialog which is used to select a file. The contents of the file are loaded into the text edit widget.
这个案例显示了一个菜单条，一个居中的文本编辑组件，以及一个状态栏。菜单项显示QFileDialog，用于选择文件。选中的文件的内容加载到文本编辑组件中。

class Example(QMainWindow):

    def __init__(self):
        super().__init__()

        self.initUI()
The example is based on the QMainWindow widget because we centrally set a text edit widget.
这个案例是基于QMainWindow组件的，因为我们居中设置了一个文本编辑组件。

home_dir = str(Path.home())
fname = QFileDialog.getOpenFileName(self, 'Open file', home_dir)
We pop up the QFileDialog. The first string in the getOpenFileName() method is the caption. The second string specifies the dialog working directory. We use the path module to determine the user's home directory. By default, the file filter is set to All files (*).
首先弹出QFileDialog对话框。getOpenFileName()方法的第一个参数是显示的标题。第二个参数指定了对话框的工作目录。我们使用目录模式来确定用户的根目录。默认情况下，文件类型设置为所有文件(*.*)

if fname[0]:
    f = open(fname[0], 'r')

    with f:
        data = f.read()
        self.textEdit.setText(data)
The selected file name is read and the contents of the file are set to the text edit widget.
读取选中的文件并且将内容显示到文本编辑组件中。

In this part of the PyQt5 tutorial, we worked with dialogs.

